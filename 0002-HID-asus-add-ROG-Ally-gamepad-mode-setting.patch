From 0c9d0a667f612b08c87a145d6cacc08bc5c1214d Mon Sep 17 00:00:00 2001
From: "Luke D. Jones" <luke@ljones.dev>
Date: Fri, 1 Dec 2023 16:57:19 +1300
Subject: [PATCH v2 2/2] HID: asus: add ROG Ally gamepad mode setting

---
 drivers/hid/hid-asus-rog.h |  83 ++++++++++++++++++++++++++
 drivers/hid/hid-asus.c     | 116 ++++++++++++++++++++++++++++++++++++-
 2 files changed, 198 insertions(+), 1 deletion(-)
 create mode 100644 drivers/hid/hid-asus-rog.h

diff --git a/drivers/hid/hid-asus-rog.h b/drivers/hid/hid-asus-rog.h
new file mode 100644
index 000000000000..2c80c0448420
--- /dev/null
+++ b/drivers/hid/hid-asus-rog.h
@@ -0,0 +1,83 @@
+enum ally_gamepad_cmd {
+	ally_gamepad_cmd_set_mode			= 0x01,
+	ally_gamepad_cmd_set_map			= 0x02,
+	ally_gamepad_cmd_set_js_map			= 0x03,
+	ally_gamepad_cmd_set_js_dz			= 0x04, /* deadzones */
+	ally_gamepad_cmd_set_tr_dz			= 0x05, /* deadzones */
+	ally_gamepad_cmd_set_vibe_intensity = 0x06,
+	ally_gamepad_cmd_check_ready		= 0x0A,
+	ally_gamepad_cmd_xpad_status		= 0x0C,
+	ally_gamepad_cmd_check_for_js_curve = 0x12,
+	ally_gamepad_cmd_set_js_curve		= 0x13,
+	ally_gamepad_cmd_set_xbox_output	= 0x15,
+	ally_gamepad_cmd_check_for_js_adz	= 0x17, // anti-deadzones
+	ally_gamepad_cmd_set_js_adz			= 0x18, // anti-deadzones
+};
+
+enum ally_gamepad_mode {
+	ally_gamepad_mode_game	= 0x01,
+	ally_gamepad_mode_wasd	= 0x02,
+	ally_gamepad_mode_mouse	= 0x03,
+};
+
+enum ally_analogue {
+	ally_analogue_stick_left	= 0x01,
+	ally_analogue_stick_right	= 0x02,
+	ally_analogue_trigger_left	= 0x03,
+	ally_analogue_trigger_right	= 0x04,
+};
+
+/* ROG Ally has many settings related to the gamepad, all using the same n-key endpoint */
+struct asus_rog_ally {
+	enum ally_gamepad_mode mode;
+	// TODO: custom mapping
+	// TODO: joystick mapping
+	u8 deadzone_left_stick[4];
+	u8 deadzone_right_stick[4];
+	/*
+	 * index: left-min, left-max, right-min, right-max
+	 * min/max: 0-64
+	 */
+	u8 deadzone_triggers[4];
+	/*
+	 * index: left, right
+	 * max: 64
+	 */
+	u8 vibration_intensity[2];
+	/*
+	 * joystick response curves:
+	 * - 4 points of 2 bytes each
+	 * - byte 0 of pair = stick move %
+	 * - byte 1 of pair = stick response %
+	 * - min/max: 1-63
+	 */
+	 bool supports_response_curves;
+	u8 response_curve_left_stick[8];
+	u8 response_curve_right_stick[8];
+	/* left = byte 0, right = byte 1*/
+	u8 anti_deadzones[2];
+};
+
+enum ally_gamepad_map_group {
+	ally_gamepad_map_group_blank	= 0x00,
+	ally_gamepad_map_group_xpad		= 0x01,
+	ally_gamepad_map_group_keyboard	= 0x02,
+	ally_gamepad_map_group_mouse	= 0x03,
+	ally_gamepad_map_group_macro	= 0x04,
+	ally_gamepad_map_group_media	= 0x05,
+};
+
+/* when used for custom mapping the byte preceding must be 0x01 */
+enum ally_gamepad_button_code {
+	ally_gamepad_button_code_a		= 0x01,
+	ally_gamepad_button_code_b		= 0x02,
+	ally_gamepad_button_code_x		= 0x03,
+	ally_gamepad_button_code_y		= 0x04,
+	ally_gamepad_button_code_lb		= 0x05,
+	ally_gamepad_button_code_rb		= 0x06,
+	ally_gamepad_button_code_ls		= 0x07,
+	ally_gamepad_button_code_lr		= 0x08,
+	ally_gamepad_button_code_view	= 0x11,
+	ally_gamepad_button_code_menu	= 0x12,
+	ally_gamepad_button_code_xbox	= 0x13,
+};
\ No newline at end of file
diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index a1c72184e464..436e1c23d5ad 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -23,6 +23,7 @@
 /*
  */
 
+#include <asm-generic/errno-base.h>
 #include <linux/dmi.h>
 #include <linux/hid.h>
 #include <linux/module.h>
@@ -32,6 +33,7 @@
 #include <linux/power_supply.h>
 #include <linux/leds.h>
 
+#include "hid-asus-rog.h"
 #include "hid-ids.h"
 
 MODULE_AUTHOR("Yusuke Fujimaki <usk.fujimaki@gmail.com>");
@@ -84,6 +86,7 @@ MODULE_DESCRIPTION("Asus HID Keyboard and TouchPad");
 #define QUIRK_MEDION_E1239T		BIT(10)
 #define QUIRK_ROG_NKEY_KEYBOARD		BIT(11)
 #define QUIRK_ROG_CLAYMORE_II_KEYBOARD BIT(12)
+#define QUIRK_ROG_ALLY_GAMEPAD	BIT(13)
 
 #define I2C_KEYBOARD_QUIRKS			(QUIRK_FIX_NOTEBOOK_REPORT | \
 						 QUIRK_NO_INIT_REPORTS | \
@@ -127,6 +130,7 @@ struct asus_drvdata {
 	int battery_stat;
 	bool battery_in_query;
 	unsigned long battery_next_query;
+	struct asus_rog_ally *rog_ally_data;
 };
 
 static int asus_report_battery(struct asus_drvdata *, u8 *, int);
@@ -329,6 +333,14 @@ static int asus_raw_event(struct hid_device *hdev,
 	if (drvdata->battery && data[0] == BATTERY_REPORT_ID)
 		return asus_report_battery(drvdata, data, size);
 
+	// TODO: remove after debugging
+	// for (int i = 0; i < size; i++) {
+	// 	if (i == 0)
+	// 		printk(KERN_INFO "GOT: %02x,", data[i]);
+	// 	else
+	// 		printk(KERN_CONT "%02x,", data[i]);
+	// }
+
 	if (drvdata->tp && data[0] == INPUT_REPORT_ID)
 		return asus_report_input(drvdata, data, size);
 
@@ -977,6 +989,77 @@ static int asus_input_mapping(struct hid_device *hdev,
 	return 0;
 }
 
+/* ASUS ROG Ally device specific attributes */
+
+static struct asus_rog_ally* __rog_ally_data(struct device *raw_dev) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+	return ((struct asus_drvdata*)hid_get_drvdata(hdev))->rog_ally_data;
+}
+
+// TODO: general purpose request function which checks the device is ready before setting
+/* The gamepad mode also needs to be set on boot/mod-load and shutdown */
+static ssize_t __gamepad_set_mode(struct device *raw_dev, int val) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+	unsigned char *hidbuf;
+	u8 *readbuf;
+	int ret;
+
+	hidbuf = kzalloc(64, GFP_KERNEL);
+	if (!hidbuf)
+		return -ENOMEM;
+
+	hidbuf[0] = FEATURE_KBD_REPORT_ID;
+	hidbuf[1] = 0xD1;
+	hidbuf[2] = ally_gamepad_cmd_set_mode;
+	hidbuf[3] = 0x01;
+	hidbuf[4] = val;
+
+	ret = asus_kbd_set_report(hdev, hidbuf, 64);
+	if (ret < 0) {
+		kfree(hidbuf);
+		return ret;
+	}
+
+	kfree(hidbuf);
+	return 0;
+}
+
+static ssize_t gamepad_mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
+	struct asus_rog_ally *rog_ally = __rog_ally_data(raw_dev);
+	return sysfs_emit(buf, "%d\n", rog_ally->mode);
+}
+
+static ssize_t gamepad_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
+	struct asus_rog_ally *rog_ally = __rog_ally_data(raw_dev);
+	int ret, val;
+
+	ret = kstrtoint(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	if (val < ally_gamepad_mode_game || val > ally_gamepad_mode_mouse)
+		return -EINVAL;
+
+	rog_ally->mode = val;
+
+	ret = __gamepad_set_mode(raw_dev, val);
+	if (ret < 0)
+		return ret;
+
+	return count;
+}
+
+DEVICE_ATTR_RW(gamepad_mode);
+
+static struct attribute *gamepad_device_attrs[] = {
+	&dev_attr_gamepad_mode.attr,
+	NULL
+};
+
+static const struct attribute_group ally_controller_attr_group = {
+	.attrs = gamepad_device_attrs,
+};
+
 static int asus_start_multitouch(struct hid_device *hdev)
 {
 	int ret;
@@ -1113,6 +1196,34 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		}
 	}
 
+	/* all ROG devices have this HID interface but we will focus on Ally for now */
+	if (drvdata->quirks & QUIRK_ROG_NKEY_KEYBOARD) {
+		hid_info(hdev, "Setting up ROG USB interface\n");
+		/* initialise and set up USB, common to ROG */
+		// TODO:
+
+		/* initialise the Ally data */
+		if (drvdata->quirks & QUIRK_ROG_ALLY_GAMEPAD) {
+			hid_info(hdev, "Setting up ROG Ally interface\n");
+			drvdata->rog_ally_data = devm_kzalloc(&hdev->dev, sizeof(*drvdata->rog_ally_data), GFP_KERNEL);
+			if (!drvdata->rog_ally_data) {
+				hid_err(hdev, "Can't alloc Asus ROG USB interface\n");
+				ret = -ENOMEM;
+				goto err_stop_hw;
+			}
+			drvdata->rog_ally_data->mode = ally_gamepad_mode_game;
+			ret = __gamepad_set_mode(&hdev->dev, ally_gamepad_mode_game);
+			if (ret < 0)
+				return ret;
+		}
+
+		ret = devm_device_add_group(&hdev->dev, &ally_controller_attr_group);
+		if (ret != 0) {
+			hid_err(hdev, "Asus ROG Ally [RC71L] error registering attr group: %d\n", ret);
+			goto err_stop_hw;
+		}
+	}
+
 	ret = hid_parse(hdev);
 	if (ret) {
 		hid_err(hdev, "Asus hid parse failed: %d\n", ret);
@@ -1162,6 +1273,9 @@ static void asus_remove(struct hid_device *hdev)
 		cancel_work_sync(&drvdata->kbd_backlight->work);
 	}
 
+	if (drvdata->rog_ally_data)
+		__gamepad_set_mode(&hdev->dev, ally_gamepad_mode_mouse);
+
 	hid_hw_stop(hdev);
 }
 
@@ -1282,7 +1396,7 @@ static const struct hid_device_id asus_devices[] = {
 	  QUIRK_USE_KBD_BACKLIGHT | QUIRK_ROG_NKEY_KEYBOARD },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_ASUSTEK,
 	    USB_DEVICE_ID_ASUSTEK_ROG_NKEY_ALLY),
-	  QUIRK_USE_KBD_BACKLIGHT | QUIRK_ROG_NKEY_KEYBOARD },
+	  QUIRK_USE_KBD_BACKLIGHT | QUIRK_ROG_NKEY_KEYBOARD | QUIRK_ROG_ALLY_GAMEPAD },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_ASUSTEK,
 	    USB_DEVICE_ID_ASUSTEK_ROG_CLAYMORE_II_KEYBOARD),
 	  QUIRK_ROG_CLAYMORE_II_KEYBOARD },
-- 
2.41.0

