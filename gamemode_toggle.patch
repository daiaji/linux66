From c570187d1137597244f18713ba1b77337ff70486 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 16:10:16 +0200
Subject: [PATCH 01/19] Send USB joystick mode switch data

---
 drivers/hid/hid-asus.c | 254 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 254 insertions(+)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index fd61dba88233..985c9a9257ff 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -31,6 +31,10 @@
 #include <linux/usb.h> /* For to_usb_interface for T100 touchpad intf check */
 #include <linux/power_supply.h>
 #include <linux/leds.h>
+#include <linux/timer.h> //@bactaholic
+#include <linux/interrupt.h>
+#include <linux/hrtimer.h>
+#include <linux/sched.h>
 
 #include "hid-ids.h"
 
@@ -94,6 +98,151 @@ MODULE_DESCRIPTION("Asus HID Keyboard and TouchPad");
 
 #define TRKID_SGN       ((TRKID_MAX + 1) >> 1)
 
+#define ALLY_VENDOR_ID  = 0x0b05;	//bactaholic
+#define ALLY_PRODUCT_ID  = 0x1abe;	//bactaholic
+#define ALLY_ENDPOINT = 0x00;		//bactaholic
+
+static const unsigned char ally_m1f17m2f18[][64] = {
+    {
+		0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+	{
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+	{
+		0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+	{
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x07, 0x2C, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x06, 0x02, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	},
+    {
+		0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+	}
+}; 
+
 struct asus_kbd_leds {
 	struct led_classdev cdev;
 	struct hid_device *hdev;
@@ -113,6 +262,12 @@ struct asus_touchpad_info {
 	int report_size;
 };
 
+enum rog_ally_controller_mode {
+	default_mode,
+	game_mode,
+	mouse_mode,
+};
+
 struct asus_drvdata {
 	unsigned long quirks;
 	struct hid_device *hdev;
@@ -127,6 +282,10 @@ struct asus_drvdata {
 	int battery_stat;
 	bool battery_in_query;
 	unsigned long battery_next_query;
+	unsigned int rog_ally_controller_mode_switch_packet_index;
+	unsigned int rog_ally_controller_pipe;
+	enum rog_ally_controller_mode rog_ally_joystick_mode;
+	struct urb* rog_ally_in_flight_urb;
 };
 
 static int asus_report_battery(struct asus_drvdata *, u8 *, int);
@@ -189,6 +348,71 @@ static const struct asus_touchpad_info medion_e1239t_tp = {
 	.report_size = 32 /* 2 byte header + 5 * 5 + 5 byte footer */,
 };
 
+static int rog_ally_joystic_packet_schedule(struct hid_device * hdev);
+
+static void rog_ally_write_ctrl_callback(struct urb *urb) {
+	struct hid_device *hdev = (struct hid_device *)urb->context;
+
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+	drvdata->rog_ally_in_flight_urb = NULL;
+
+	kfree(urb->transfer_buffer);
+
+	rog_ally_joystic_packet_schedule(hdev);
+}
+
+//bactaholic & NeroReflex
+static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, size_t buf_sz) {
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	struct urb * ally_urb = usb_alloc_urb(0, GFP_ATOMIC);
+	//urb->field = value;
+
+	/* set up our urb */
+	usb_fill_bulk_urb(ally_urb,
+					dev,
+					drvdata->rog_ally_controller_pipe,
+					kmalloc(buf_sz, GFP_KERNEL),
+					buf_sz,
+					rog_ally_write_ctrl_callback,
+					(void*)hdev);
+
+	/* copy the data from user space into our urb */
+	memcpy((void*)ally_urb->transfer_buffer, buf, buf_sz);
+
+	/* send the data out the bulk port */
+	int retval = usb_submit_urb(ally_urb, GFP_KERNEL);
+	if (retval) {
+		dev_err(&dev->dev,
+			"%s - failed submitting write urb, error %d\n",
+			__func__, retval);
+
+		return retval;
+	}
+
+	drvdata->rog_ally_in_flight_urb = ally_urb;
+
+	return 0;
+}
+
+static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	int ret = -1;
+
+	if (drvdata->rog_ally_controller_mode_switch_packet_index < 23) {
+		ret = rog_ally_data_injector(hdev, (const void*)&ally_m1f17m2f18[drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
+		if (ret == 0) {
+			++drvdata->rog_ally_controller_mode_switch_packet_index;
+		}
+	}
+
+	return ret;
+}
+
 static void asus_report_contact_down(struct asus_drvdata *drvdat,
 		int toolType, u8 *data)
 {
@@ -1010,6 +1234,20 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 	return 0;
 }
 
+static int __maybe_unused asus_suspend(struct hid_device *hdev, pm_message_t message) {
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	if (drvdata->rog_ally_in_flight_urb != NULL) {
+		usb_kill_urb(drvdata->rog_ally_in_flight_urb);
+	}
+
+	return 0;
+}
+
+static int __maybe_unused asus_resume(struct hid_device *hdev) {
+	return 0;
+}
+
 static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 {
 	int ret;
@@ -1121,6 +1359,19 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 	}
 
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	drvdata->rog_ally_in_flight_urb = NULL;
+	drvdata->rog_ally_controller_mode_switch_packet_index = 0;
+	drvdata->rog_ally_joystick_mode = game_mode;
+
+	// usb_device and endpoint
+	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0x09);
+
+	// Apply the joystick mode switch
+	rog_ally_joystic_packet_schedule(hdev);
+
 	return 0;
 err_stop_hw:
 	hid_hw_stop(hdev);
@@ -1274,6 +1525,7 @@ static const struct hid_device_id asus_devices[] = {
 		USB_DEVICE_ID_ASUSTEK_T100CHI_KEYBOARD), QUIRK_T100CHI },
 	{ HID_USB_DEVICE(USB_VENDOR_ID_ITE, USB_DEVICE_ID_ITE_MEDION_E1239T),
 		QUIRK_MEDION_E1239T },
+	//{ ROG_ALLY(ALLY_VENDOR_ID, ALLY_PRODUCT_ID, ALLY_ENDPOINT) },
 	/*
 	 * Note bind to the HID_GROUP_GENERIC group, so that we only bind to the keyboard
 	 * part, while letting hid-multitouch.c handle the touchpad.
@@ -1293,6 +1545,8 @@ static struct hid_driver asus_driver = {
 	.input_mapping          = asus_input_mapping,
 	.input_configured       = asus_input_configured,
 #ifdef CONFIG_PM
+	.suspend				= asus_suspend,
+	.resume 				= asus_resume,
 	.reset_resume           = asus_reset_resume,
 #endif
 	.event			= asus_event,
-- 
2.42.0


From ccc5697dcdad3ec6e87c0393f22bb6ee92a75311 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 17:57:57 +0200
Subject: [PATCH 02/19] print and different pipe

---
 drivers/hid/hid-asus.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 985c9a9257ff..7d7c32858b0d 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -404,6 +404,10 @@ static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
 	int ret = -1;
 
 	if (drvdata->rog_ally_controller_mode_switch_packet_index < 23) {
+		dev_err(&dev->dev,
+			"Ally sending packet %d/22\n",
+			(int)drvdata->rog_ally_controller_mode_switch_packet_index);
+
 		ret = rog_ally_data_injector(hdev, (const void*)&ally_m1f17m2f18[drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
 		if (ret == 0) {
 			++drvdata->rog_ally_controller_mode_switch_packet_index;
@@ -1367,7 +1371,7 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 	drvdata->rog_ally_joystick_mode = game_mode;
 
 	// usb_device and endpoint
-	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0x09);
+	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
 	// Apply the joystick mode switch
 	rog_ally_joystic_packet_schedule(hdev);
-- 
2.42.0


From bd6426d6e07ff241204306160ebd8f023bcf1a3f Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 18:05:24 +0200
Subject: [PATCH 03/19] get usb_dev from hiddev

---
 drivers/hid/hid-asus.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 7d7c32858b0d..1363d4d7357b 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -401,6 +401,9 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
 	int ret = -1;
 
 	if (drvdata->rog_ally_controller_mode_switch_packet_index < 23) {
-- 
2.42.0


From 94d0a9f07d589094cc60d73a00f9bfff42c3ff33 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 19:04:51 +0200
Subject: [PATCH 04/19] Use usb_control_msg

---
 drivers/hid/hid-asus.c | 65 ++++++++++++++----------------------------
 1 file changed, 22 insertions(+), 43 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 1363d4d7357b..388a9c898d44 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -285,7 +285,6 @@ struct asus_drvdata {
 	unsigned int rog_ally_controller_mode_switch_packet_index;
 	unsigned int rog_ally_controller_pipe;
 	enum rog_ally_controller_mode rog_ally_joystick_mode;
-	struct urb* rog_ally_in_flight_urb;
 };
 
 static int asus_report_battery(struct asus_drvdata *, u8 *, int);
@@ -348,19 +347,6 @@ static const struct asus_touchpad_info medion_e1239t_tp = {
 	.report_size = 32 /* 2 byte header + 5 * 5 + 5 byte footer */,
 };
 
-static int rog_ally_joystic_packet_schedule(struct hid_device * hdev);
-
-static void rog_ally_write_ctrl_callback(struct urb *urb) {
-	struct hid_device *hdev = (struct hid_device *)urb->context;
-
-	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
-	drvdata->rog_ally_in_flight_urb = NULL;
-
-	kfree(urb->transfer_buffer);
-
-	rog_ally_joystic_packet_schedule(hdev);
-}
-
 //bactaholic & NeroReflex
 static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, size_t buf_sz) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
@@ -368,33 +354,31 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 	struct usb_device *dev = interface_to_usbdev(intf);
 
-	struct urb * ally_urb = usb_alloc_urb(0, GFP_ATOMIC);
-	//urb->field = value;
+	void *buffer_clone = kzalloc(buf_sz, GFP_KERNEL);
 
-	/* set up our urb */
-	usb_fill_bulk_urb(ally_urb,
-					dev,
-					drvdata->rog_ally_controller_pipe,
-					kmalloc(buf_sz, GFP_KERNEL),
-					buf_sz,
-					rog_ally_write_ctrl_callback,
-					(void*)hdev);
+	if (buffer_clone == NULL) {
+		return -ENOMEM;
+	}
 
-	/* copy the data from user space into our urb */
-	memcpy((void*)ally_urb->transfer_buffer, buf, buf_sz);
+	memcpy(buffer_clone, buf, buf_sz);
 
 	/* send the data out the bulk port */
-	int retval = usb_submit_urb(ally_urb, GFP_KERNEL);
-	if (retval) {
+	int retval = usb_control_msg(dev, drvdata->rog_ally_controller_pipe, 0x09, 0x21, 0x035A, 0x0002, buffer_clone, buf_sz, 999);
+
+	kfree(buffer_clone);
+
+	if (retval < 0) {
 		dev_err(&dev->dev,
-			"%s - failed submitting write urb, error %d\n",
-			__func__, retval);
+			"%s - Ally failed submitting control write to pipe %d, error %d\n",
+			__func__, drvdata->rog_ally_controller_pipe, retval);
 
 		return retval;
+	} else {
+		dev_info(&dev->dev,
+			"%s - Ally control write sent to pipe %d: %d bytes\n",
+			__func__, drvdata->rog_ally_controller_pipe, retval);
 	}
 
-	drvdata->rog_ally_in_flight_urb = ally_urb;
-
 	return 0;
 }
 
@@ -404,20 +388,22 @@ static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 	struct usb_device *dev = interface_to_usbdev(intf);
 
-	int ret = -1;
+	int ret = 0;
 
-	if (drvdata->rog_ally_controller_mode_switch_packet_index < 23) {
+	while ((drvdata->rog_ally_controller_mode_switch_packet_index < 23) && (ret >= 0)) {
 		dev_err(&dev->dev,
 			"Ally sending packet %d/22\n",
 			(int)drvdata->rog_ally_controller_mode_switch_packet_index);
 
 		ret = rog_ally_data_injector(hdev, (const void*)&ally_m1f17m2f18[drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
-		if (ret == 0) {
+		if (ret >= 0) {
 			++drvdata->rog_ally_controller_mode_switch_packet_index;
+		} else {
+			drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		}
 	}
 
-	return ret;
+	return ret < 0 ? ret : 0;
 }
 
 static void asus_report_contact_down(struct asus_drvdata *drvdat,
@@ -1242,12 +1228,6 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 }
 
 static int __maybe_unused asus_suspend(struct hid_device *hdev, pm_message_t message) {
-	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
-
-	if (drvdata->rog_ally_in_flight_urb != NULL) {
-		usb_kill_urb(drvdata->rog_ally_in_flight_urb);
-	}
-
 	return 0;
 }
 
@@ -1369,7 +1349,6 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 	struct usb_device *dev = interface_to_usbdev(intf);
 
-	drvdata->rog_ally_in_flight_urb = NULL;
 	drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 	drvdata->rog_ally_joystick_mode = game_mode;
 
-- 
2.42.0


From d90e22dea6b2fd498401a8a619c3c8d030de0647 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 21:10:49 +0200
Subject: [PATCH 05/19] Test a default to mouse mode

---
 drivers/hid/hid-asus.c | 597 +++++++++++++++++++++++++++++++----------
 1 file changed, 454 insertions(+), 143 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 388a9c898d44..fa6fa27a706d 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -102,146 +102,434 @@ MODULE_DESCRIPTION("Asus HID Keyboard and TouchPad");
 #define ALLY_PRODUCT_ID  = 0x1abe;	//bactaholic
 #define ALLY_ENDPOINT = 0x00;		//bactaholic
 
-static const unsigned char ally_m1f17m2f18[][64] = {
-    {
-		0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
+/*
+ * USB buffers to be used in a control transfer to make the joystick change buttons mode and scancodes
+ * 0 is default
+ * 1 is game mode m1f17_m2f18
+ * 2 is mouse mode
+ */
+static const unsigned char ally_mode_switch_commands[][23][64] = {
 	{
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		{
+			0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x07, 0x2C, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x06, 0x02, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+		0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+		0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		}
 	},
 	{
-		0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		{
+			0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x07, 0x2C, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x06, 0x02, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		}
 	},
 	{
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x07, 0x2C, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x06, 0x02, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-	},
-    {
-		0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		{
+			0x5A, 0xD1, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x02, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x99, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x02, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x9B, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x02, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x02, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x76, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x02, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x96, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x07, 0x2C, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x88, 0x0D, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x0F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x06, 0x02, 0x64, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		},
+		{
+			0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+		}
 	}
-}; 
+};
 
 struct asus_kbd_leds {
 	struct led_classdev cdev;
@@ -382,7 +670,7 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 	return 0;
 }
 
-static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
+static int rog_ally_joystic_packet_schedule(struct hid_device * hdev, enum rog_ally_controller_mode new_mode) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 
 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
@@ -390,12 +678,28 @@ static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
 
 	int ret = 0;
 
-	while ((drvdata->rog_ally_controller_mode_switch_packet_index < 23) && (ret >= 0)) {
-		dev_err(&dev->dev,
-			"Ally sending packet %d/22\n",
-			(int)drvdata->rog_ally_controller_mode_switch_packet_index);
+	unsigned char ally_packets_group = 0;
+	switch (new_mode) {
+		case default_mode:
+			ally_packets_group = 0;
+			break;
+		
+		case game_mode:
+			ally_packets_group = 1;
+			break;
+
+		case mouse_mode:
+			ally_packets_group = 2;
+			break;
+
+		default:
+			// same as default mode
+			ally_packets_group = 0;
+			break;
+	}
 
-		ret = rog_ally_data_injector(hdev, (const void*)&ally_m1f17m2f18[drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
+	while ((drvdata->rog_ally_controller_mode_switch_packet_index < 23) && (ret >= 0)) {
+		ret = rog_ally_data_injector(hdev, (const void*)&ally_mode_switch_commands[ally_packets_group][drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
 		if (ret >= 0) {
 			++drvdata->rog_ally_controller_mode_switch_packet_index;
 		} else {
@@ -403,7 +707,14 @@ static int rog_ally_joystic_packet_schedule(struct hid_device * hdev) {
 		}
 	}
 
-	return ret < 0 ? ret : 0;
+	ret = ret < 0 ? ret : 0;
+
+	// controller mode has been switched successfully: change that in driver data
+	if (ret == 0) {
+		drvdata->rog_ally_joystick_mode = new_mode;
+	}
+
+	return ret;
 }
 
 static void asus_report_contact_down(struct asus_drvdata *drvdat,
@@ -1350,13 +1661,13 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 	struct usb_device *dev = interface_to_usbdev(intf);
 
 	drvdata->rog_ally_controller_mode_switch_packet_index = 0;
-	drvdata->rog_ally_joystick_mode = game_mode;
+	drvdata->rog_ally_joystick_mode = default_mode;
 
 	// usb_device and endpoint
 	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
 	// Apply the joystick mode switch
-	rog_ally_joystic_packet_schedule(hdev);
+	rog_ally_joystic_packet_schedule(hdev, mouse_mode);
 
 	return 0;
 err_stop_hw:
-- 
2.42.0


From 829e0932197d6185c6715ed76f9f3655bc3131b0 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 21:34:52 +0200
Subject: [PATCH 06/19] Default mode

---
 drivers/hid/hid-asus.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index fa6fa27a706d..354164154059 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -1667,7 +1667,7 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
 	// Apply the joystick mode switch
-	rog_ally_joystic_packet_schedule(hdev, mouse_mode);
+	rog_ally_joystic_packet_schedule(hdev, default_mode);
 
 	return 0;
 err_stop_hw:
-- 
2.42.0


From a211600708c1a0c46b7dfd2bb075d9c708a5b4db Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 21:44:31 +0200
Subject: [PATCH 07/19] test resume

---
 drivers/hid/hid-asus.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 354164154059..fcb8d26671c7 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -1543,7 +1543,14 @@ static int __maybe_unused asus_suspend(struct hid_device *hdev, pm_message_t mes
 }
 
 static int __maybe_unused asus_resume(struct hid_device *hdev) {
-	return 0;
+	int ret = 0;
+
+	// Apply the joystick mode it has been left before sleep
+	//rog_ally_joystic_packet_schedule(hdev, drvdata->rog_ally_joystick_mode);
+
+	rog_ally_joystic_packet_schedule(hdev, game_mode);
+
+	return ret;
 }
 
 static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
-- 
2.42.0


From bafe064775862868cb327158592f352baa362715 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 22:32:10 +0200
Subject: [PATCH 08/19] Improved messaging

---
 drivers/hid/hid-asus.c | 59 ++++++++++++++++++++----------------------
 1 file changed, 28 insertions(+), 31 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index fcb8d26671c7..c00b146d27a9 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -656,13 +656,13 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 	kfree(buffer_clone);
 
 	if (retval < 0) {
-		dev_err(&dev->dev,
+		hid_err(hdev,
 			"%s - Ally failed submitting control write to pipe %d, error %d\n",
 			__func__, drvdata->rog_ally_controller_pipe, retval);
 
 		return retval;
 	} else {
-		dev_info(&dev->dev,
+		hid_info(hdev,
 			"%s - Ally control write sent to pipe %d: %d bytes\n",
 			__func__, drvdata->rog_ally_controller_pipe, retval);
 	}
@@ -673,9 +673,6 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 static int rog_ally_joystic_packet_schedule(struct hid_device * hdev, enum rog_ally_controller_mode new_mode) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 
-	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
-	struct usb_device *dev = interface_to_usbdev(intf);
-
 	int ret = 0;
 
 	unsigned char ally_packets_group = 0;
@@ -701,8 +698,14 @@ static int rog_ally_joystic_packet_schedule(struct hid_device * hdev, enum rog_a
 	while ((drvdata->rog_ally_controller_mode_switch_packet_index < 23) && (ret >= 0)) {
 		ret = rog_ally_data_injector(hdev, (const void*)&ally_mode_switch_commands[ally_packets_group][drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
 		if (ret >= 0) {
-			++drvdata->rog_ally_controller_mode_switch_packet_index;
+			hid_info(hdev,
+				"%s - Ally controller mode packet %d/23 success %d\n",
+				__func__, drvdata->rog_ally_controller_mode_switch_packet_index, ret);
+			drvdata->rog_ally_controller_mode_switch_packet_index += 1;
 		} else {
+			hid_info(hdev,
+				"%s - Ally controller mode packet %d/23 error %d\n",
+				__func__, drvdata->rog_ally_controller_mode_switch_packet_index, ret);
 			drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		}
 	}
@@ -1532,23 +1535,17 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 {
 	struct asus_drvdata *drvdata = hid_get_drvdata(hdev);
 
-	if (drvdata->tp)
-		return asus_start_multitouch(hdev);
-
-	return 0;
-}
-
-static int __maybe_unused asus_suspend(struct hid_device *hdev, pm_message_t message) {
-	return 0;
-}
-
-static int __maybe_unused asus_resume(struct hid_device *hdev) {
 	int ret = 0;
 
-	// Apply the joystick mode it has been left before sleep
-	//rog_ally_joystic_packet_schedule(hdev, drvdata->rog_ally_joystick_mode);
+	{
+		// Apply the joystick mode switch
+		ret = rog_ally_joystic_packet_schedule(hdev, game_mode);
+
+		hid_err(hdev, "Asus wake, restore controller %d\n", ret);
+	}
 
-	rog_ally_joystic_packet_schedule(hdev, game_mode);
+	if (drvdata->tp)
+		return asus_start_multitouch(hdev);
 
 	return ret;
 }
@@ -1664,18 +1661,20 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 	}
 
-	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
-	struct usb_device *dev = interface_to_usbdev(intf);
-
-	drvdata->rog_ally_controller_mode_switch_packet_index = 0;
-	drvdata->rog_ally_joystick_mode = default_mode;
+	{
+		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+		struct usb_device *dev = interface_to_usbdev(intf);
 
-	// usb_device and endpoint
-	drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
+		drvdata->rog_ally_controller_mode_switch_packet_index = 0;
+		drvdata->rog_ally_joystick_mode = default_mode;
 
-	// Apply the joystick mode switch
-	rog_ally_joystic_packet_schedule(hdev, default_mode);
+		// usb_device and endpoint
+		drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
+		// Apply the joystick mode switch
+		rog_ally_joystic_packet_schedule(hdev, default_mode);
+	}
+	
 	return 0;
 err_stop_hw:
 	hid_hw_stop(hdev);
@@ -1849,8 +1848,6 @@ static struct hid_driver asus_driver = {
 	.input_mapping          = asus_input_mapping,
 	.input_configured       = asus_input_configured,
 #ifdef CONFIG_PM
-	.suspend				= asus_suspend,
-	.resume 				= asus_resume,
 	.reset_resume           = asus_reset_resume,
 #endif
 	.event			= asus_event,
-- 
2.42.0


From 38c33dde864865c0939cd4cf28608d60a0a92a22 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 23:39:01 +0200
Subject: [PATCH 09/19] Looking up for DMI

---
 drivers/hid/hid-asus.c | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index c00b146d27a9..2176b31deb6f 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -670,7 +670,7 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 	return 0;
 }
 
-static int rog_ally_joystic_packet_schedule(struct hid_device * hdev, enum rog_ally_controller_mode new_mode) {
+static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_ally_controller_mode new_mode) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 
 	int ret = 0;
@@ -1539,7 +1539,7 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 
 	{
 		// Apply the joystick mode switch
-		ret = rog_ally_joystic_packet_schedule(hdev, game_mode);
+		ret = rog_ally_controller_mode_change(hdev, game_mode);
 
 		hid_err(hdev, "Asus wake, restore controller %d\n", ret);
 	}
@@ -1661,6 +1661,10 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 	}
 
+	// TODO: if (dmi_match(DMI_PRODUCT_NAME, "T200TA")
+	const char* dmi = dmi_get_system_info(DMI_PRODUCT_NAME);
+	hid_err(hdev, "Ally DMI DMI_PRODUCT_NAME: %s\n", dmi);
+
 	{
 		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 		struct usb_device *dev = interface_to_usbdev(intf);
@@ -1672,7 +1676,9 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
 		// Apply the joystick mode switch
-		rog_ally_joystic_packet_schedule(hdev, default_mode);
+		ret = rog_ally_controller_mode_change(hdev, default_mode);
+		if (ret != 0)
+			goto err_stop_hw;
 	}
 	
 	return 0;
-- 
2.42.0


From 44ccaacc1e74bb168369139bd0b49669bb2d5adc Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 23:57:51 +0200
Subject: [PATCH 10/19] Check for DMI

---
 drivers/hid/hid-asus.c | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 2176b31deb6f..4d6fd814277e 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -1537,6 +1537,7 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 
 	int ret = 0;
 
+	if (dmi_match(DMI_PRODUCT_NAME, "ROG Ally RC71L_RC71L"))
 	{
 		// Apply the joystick mode switch
 		ret = rog_ally_controller_mode_change(hdev, game_mode);
@@ -1661,10 +1662,7 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 	}
 
-	// TODO: if (dmi_match(DMI_PRODUCT_NAME, "T200TA")
-	const char* dmi = dmi_get_system_info(DMI_PRODUCT_NAME);
-	hid_err(hdev, "Ally DMI DMI_PRODUCT_NAME: %s\n", dmi);
-
+	if (dmi_match(DMI_PRODUCT_NAME, "ROG Ally RC71L_RC71L"))
 	{
 		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 		struct usb_device *dev = interface_to_usbdev(intf);
-- 
2.42.0


From 6cec1c82b87f5a7be56b97fa31ea5553702dedbb Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sun, 22 Oct 2023 23:59:16 +0200
Subject: [PATCH 11/19] Less output

---
 drivers/hid/hid-asus.c | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 4d6fd814277e..6f57719e8c40 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -657,14 +657,10 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 
 	if (retval < 0) {
 		hid_err(hdev,
-			"%s - Ally failed submitting control write to pipe %d, error %d\n",
-			__func__, drvdata->rog_ally_controller_pipe, retval);
+			"%s - Ally failed submitting control write error %d\n",
+			__func__, retval);
 
 		return retval;
-	} else {
-		hid_info(hdev,
-			"%s - Ally control write sent to pipe %d: %d bytes\n",
-			__func__, drvdata->rog_ally_controller_pipe, retval);
 	}
 
 	return 0;
-- 
2.42.0


From a9dfdb4222a1d22f737442fc3236867c0f11734b Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 00:14:14 +0200
Subject: [PATCH 12/19] Produce less output

---
 drivers/hid/hid-asus.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 6f57719e8c40..331c9a8c18f1 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -695,13 +695,13 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 		ret = rog_ally_data_injector(hdev, (const void*)&ally_mode_switch_commands[ally_packets_group][drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
 		if (ret >= 0) {
 			hid_info(hdev,
-				"%s - Ally controller mode packet %d/23 success %d\n",
-				__func__, drvdata->rog_ally_controller_mode_switch_packet_index, ret);
+				"Ally controller mode switch %d/23 success %d\n",
+				drvdata->rog_ally_controller_mode_switch_packet_index, ret);
 			drvdata->rog_ally_controller_mode_switch_packet_index += 1;
 		} else {
 			hid_info(hdev,
-				"%s - Ally controller mode packet %d/23 error %d\n",
-				__func__, drvdata->rog_ally_controller_mode_switch_packet_index, ret);
+				"Ally controller mode switch %d/23 error %d\n",
+				drvdata->rog_ally_controller_mode_switch_packet_index, ret);
 			drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		}
 	}
-- 
2.42.0


From 58853e2593a1bedf09e42ee5d0bf42fc22c3e371 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 01:02:31 +0200
Subject: [PATCH 13/19] Add sysfs interface

---
 drivers/hid/hid-asus.c | 49 +++++++++++++++++++++++++++++++++++++++---
 1 file changed, 46 insertions(+), 3 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 331c9a8c18f1..3a9355a6e0e3 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -26,6 +26,7 @@
 #include <linux/dmi.h>
 #include <linux/hid.h>
 #include <linux/module.h>
+#include <linux/sysfs.h>
 #include <linux/platform_data/x86/asus-wmi.h>
 #include <linux/input/mt.h>
 #include <linux/usb.h> /* For to_usb_interface for T100 touchpad intf check */
@@ -635,6 +636,41 @@ static const struct asus_touchpad_info medion_e1239t_tp = {
 	.report_size = 32 /* 2 byte header + 5 * 5 + 5 byte footer */,
 };
 
+static ssize_t current_mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	return sysfs_emit(buf, "%d\n", (int)drvdata->rog_ally_joystick_mode);
+}
+
+static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+
+	hid_err(hdev,
+			"%s - received buffer %d bytes: \"%s\"\n",
+			__func__, (int)count, buf);
+
+	return count;
+}
+
+DEVICE_ATTR_RO(current_mode);
+DEVICE_ATTR_WO(switch_mode);
+
+static struct attribute *controller_modes_attrs[] = {
+	&dev_attr_current_mode.attr,
+	&dev_attr_switch_mode.attr,
+	NULL
+};
+
+static const struct attribute_group ally_controller_attr_group = {
+	.name = "ally_controller",
+	.attrs = controller_modes_attrs,
+};
+
 //bactaholic & NeroReflex
 static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, size_t buf_sz) {
 	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
@@ -657,8 +693,7 @@ static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, siz
 
 	if (retval < 0) {
 		hid_err(hdev,
-			"%s - Ally failed submitting control write error %d\n",
-			__func__, retval);
+			"failed submitting control write error %d\n", retval);
 
 		return retval;
 	}
@@ -1663,6 +1698,12 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 		struct usb_device *dev = interface_to_usbdev(intf);
 
+		ret = devm_device_add_group(&hdev->dev, &ally_controller_attr_group);
+		if (ret != 0) {
+			hid_err(hdev, "Asus ROG Ally error registering attr group: %d\n", ret);
+			goto err_stop_hw;
+		}
+
 		drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		drvdata->rog_ally_joystick_mode = default_mode;
 
@@ -1671,8 +1712,10 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 
 		// Apply the joystick mode switch
 		ret = rog_ally_controller_mode_change(hdev, default_mode);
-		if (ret != 0)
+		if (ret != 0) {
+			hid_err(hdev, "Asus ROG Ally error changing controller mode: %d\n", ret);
 			goto err_stop_hw;
+		}
 	}
 	
 	return 0;
-- 
2.42.0


From e1d058120ed3192af274a07e516a7e613b14b2eb Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 01:30:46 +0200
Subject: [PATCH 14/19] Allow mode change

---
 drivers/hid/hid-asus.c | 90 ++++++++++++++++++++++++++----------------
 1 file changed, 56 insertions(+), 34 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 3a9355a6e0e3..229a9e922a39 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -636,40 +636,6 @@ static const struct asus_touchpad_info medion_e1239t_tp = {
 	.report_size = 32 /* 2 byte header + 5 * 5 + 5 byte footer */,
 };
 
-static ssize_t current_mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
-	struct hid_device *hdev = to_hid_device(raw_dev);
-
-	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
-
-	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
-	struct usb_device *dev = interface_to_usbdev(intf);
-
-	return sysfs_emit(buf, "%d\n", (int)drvdata->rog_ally_joystick_mode);
-}
-
-static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
-	struct hid_device *hdev = to_hid_device(raw_dev);
-
-	hid_err(hdev,
-			"%s - received buffer %d bytes: \"%s\"\n",
-			__func__, (int)count, buf);
-
-	return count;
-}
-
-DEVICE_ATTR_RO(current_mode);
-DEVICE_ATTR_WO(switch_mode);
-
-static struct attribute *controller_modes_attrs[] = {
-	&dev_attr_current_mode.attr,
-	&dev_attr_switch_mode.attr,
-	NULL
-};
-
-static const struct attribute_group ally_controller_attr_group = {
-	.name = "ally_controller",
-	.attrs = controller_modes_attrs,
-};
 
 //bactaholic & NeroReflex
 static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, size_t buf_sz) {
@@ -751,6 +717,62 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 	return ret;
 }
 
+static ssize_t current_mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	return sysfs_emit(buf, "%d\n", (int)drvdata->rog_ally_joystick_mode);
+}
+
+static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+
+	int res = -EINVAL;
+	int val = -EINVAL;
+	res = kstrtoint(buf, 0, &val);
+	if (res)
+		return res;
+
+	switch (val) {
+		case 0:
+			res = rog_ally_controller_mode_change(hdev, default_mode);
+			break;
+		
+		case 1:
+			res = rog_ally_controller_mode_change(hdev, game_mode);
+			break;
+
+		case 2:
+			res = rog_ally_controller_mode_change(hdev, mouse_mode);
+			break;
+
+		default:
+			return -EINVAL;
+	}
+
+	hid_err(hdev, "Ally controller mode switch to %d mode op result: %d\n", val, res);
+
+	return count;
+}
+
+DEVICE_ATTR_RO(current_mode);
+DEVICE_ATTR_WO(switch_mode);
+
+static struct attribute *controller_modes_attrs[] = {
+	&dev_attr_current_mode.attr,
+	&dev_attr_switch_mode.attr,
+	NULL
+};
+
+static const struct attribute_group ally_controller_attr_group = {
+	.name = "ally_controller",
+	.attrs = controller_modes_attrs,
+};
+
 static void asus_report_contact_down(struct asus_drvdata *drvdat,
 		int toolType, u8 *data)
 {
-- 
2.42.0


From d5644efb7ce9f59f55e00e30fb6ea43c4977c7cf Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 02:25:07 +0200
Subject: [PATCH 15/19] Do not set the default mode on startup

---
 drivers/hid/hid-asus.c | 37 ++++++++++++++++++++++++-------------
 1 file changed, 24 insertions(+), 13 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 229a9e922a39..ac1fe15cde6c 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -573,7 +573,8 @@ struct asus_drvdata {
 	unsigned long battery_next_query;
 	unsigned int rog_ally_controller_mode_switch_packet_index;
 	unsigned int rog_ally_controller_pipe;
-	enum rog_ally_controller_mode rog_ally_joystick_mode;
+	enum rog_ally_controller_mode rog_ally_controller_mode;
+	struct mutex rog_ally_controller_mutex;
 };
 
 static int asus_report_battery(struct asus_drvdata *, u8 *, int);
@@ -711,7 +712,7 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 
 	// controller mode has been switched successfully: change that in driver data
 	if (ret == 0) {
-		drvdata->rog_ally_joystick_mode = new_mode;
+		drvdata->rog_ally_controller_mode = new_mode;
 	}
 
 	return ret;
@@ -725,12 +726,18 @@ static ssize_t current_mode_show(struct device *raw_dev, struct device_attribute
 	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 	struct usb_device *dev = interface_to_usbdev(intf);
 
-	return sysfs_emit(buf, "%d\n", (int)drvdata->rog_ally_joystick_mode);
+	mutex_lock(&drvdata->rog_ally_controller_mutex);
+	int res = sysfs_emit(buf, "%d\n", (int)drvdata->rog_ally_controller_mode);
+	mutex_unlock(&drvdata->rog_ally_controller_mutex);
+
+	return res;
 }
 
 static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
 	struct hid_device *hdev = to_hid_device(raw_dev);
 
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
 	int res = -EINVAL;
 	int val = -EINVAL;
 	res = kstrtoint(buf, 0, &val);
@@ -739,15 +746,21 @@ static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute
 
 	switch (val) {
 		case 0:
+			mutex_lock(&drvdata->rog_ally_controller_mutex);
 			res = rog_ally_controller_mode_change(hdev, default_mode);
+			mutex_unlock(&drvdata->rog_ally_controller_mutex);
 			break;
 		
 		case 1:
+			mutex_lock(&drvdata->rog_ally_controller_mutex);
 			res = rog_ally_controller_mode_change(hdev, game_mode);
+			mutex_unlock(&drvdata->rog_ally_controller_mutex);
 			break;
 
 		case 2:
+			mutex_lock(&drvdata->rog_ally_controller_mutex);
 			res = rog_ally_controller_mode_change(hdev, mouse_mode);
+			mutex_unlock(&drvdata->rog_ally_controller_mutex);
 			break;
 
 		default:
@@ -1590,6 +1603,8 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 
 	int ret = 0;
 
+/*
+	// Controller mode is kept on device sleep
 	if (dmi_match(DMI_PRODUCT_NAME, "ROG Ally RC71L_RC71L"))
 	{
 		// Apply the joystick mode switch
@@ -1597,6 +1612,7 @@ static int __maybe_unused asus_reset_resume(struct hid_device *hdev)
 
 		hid_err(hdev, "Asus wake, restore controller %d\n", ret);
 	}
+*/
 
 	if (drvdata->tp)
 		return asus_start_multitouch(hdev);
@@ -1720,22 +1736,17 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 		struct usb_device *dev = interface_to_usbdev(intf);
 
-		ret = devm_device_add_group(&hdev->dev, &ally_controller_attr_group);
-		if (ret != 0) {
-			hid_err(hdev, "Asus ROG Ally error registering attr group: %d\n", ret);
-			goto err_stop_hw;
-		}
-
 		drvdata->rog_ally_controller_mode_switch_packet_index = 0;
-		drvdata->rog_ally_joystick_mode = default_mode;
+		drvdata->rog_ally_controller_mode = default_mode;
 
 		// usb_device and endpoint
 		drvdata->rog_ally_controller_pipe = usb_sndctrlpipe(dev, 0);
 
-		// Apply the joystick mode switch
-		ret = rog_ally_controller_mode_change(hdev, default_mode);
+		mutex_init(&drvdata->rog_ally_controller_mutex);
+
+		ret = devm_device_add_group(&hdev->dev, &ally_controller_attr_group);
 		if (ret != 0) {
-			hid_err(hdev, "Asus ROG Ally error changing controller mode: %d\n", ret);
+			hid_err(hdev, "Asus ROG Ally error registering attr group: %d\n", ret);
 			goto err_stop_hw;
 		}
 	}
-- 
2.42.0


From 220ffe2b9539b074da7bbd1fb0051845f2c0afee Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 20:30:10 +0200
Subject: [PATCH 16/19] Read data from controller before submitting commands

---
 drivers/hid/hid-asus.c | 36 +++++++++++++++++++++++++++++++++++-
 1 file changed, 35 insertions(+), 1 deletion(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index ac1fe15cde6c..99db98c097bd 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -637,6 +637,33 @@ static const struct asus_touchpad_info medion_e1239t_tp = {
 	.report_size = 32 /* 2 byte header + 5 * 5 + 5 byte footer */,
 };
 
+static int rog_ally_data_read(struct hid_device * hdev) {
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+	
+	int retval = 0;
+
+	void *recv_buffer = kzalloc(32, GFP_KERNEL);
+	if (recv_buffer == NULL) {
+		retval = -ENOMEM;
+		goto rog_ally_data_read_alloc_err;
+	}
+
+	retval = usb_control_msg_recv(dev, 0x80, 0x01, 0xa1, 0x035A, 0x0002, recv_buffer, 32, 999, GFP_KERNEL);
+
+	if (retval < 0) {
+		hid_err(hdev, "Ally read failed performing control read, error %d\n", retval);
+		goto rog_ally_data_read_err;
+	}
+
+rog_ally_data_read_err:
+	kfree(recv_buffer);
+
+rog_ally_data_read_alloc_err:
+	return retval;
+}
 
 //bactaholic & NeroReflex
 static int rog_ally_data_injector(struct hid_device * hdev, const void* buf, size_t buf_sz) {
@@ -692,6 +719,12 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 			ally_packets_group = 0;
 			break;
 	}
+	
+	ret = rog_ally_data_read(hdev);
+	if (ret < 0) {
+		hid_err(hdev, "Ally controller mode switch read error %d\n", ret);
+		goto rog_ally_controller_mode_change_err;
+	}
 
 	while ((drvdata->rog_ally_controller_mode_switch_packet_index < 23) && (ret >= 0)) {
 		ret = rog_ally_data_injector(hdev, (const void*)&ally_mode_switch_commands[ally_packets_group][drvdata->rog_ally_controller_mode_switch_packet_index][0], 64);
@@ -701,13 +734,14 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 				drvdata->rog_ally_controller_mode_switch_packet_index, ret);
 			drvdata->rog_ally_controller_mode_switch_packet_index += 1;
 		} else {
-			hid_info(hdev,
+			hid_err(hdev,
 				"Ally controller mode switch %d/23 error %d\n",
 				drvdata->rog_ally_controller_mode_switch_packet_index, ret);
 			drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		}
 	}
 
+rog_ally_controller_mode_change_err:
 	ret = ret < 0 ? ret : 0;
 
 	// controller mode has been switched successfully: change that in driver data
-- 
2.42.0


From 9641ec335b0d0e2cdd8b76deae54c77976cbbcb5 Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Mon, 23 Oct 2023 21:10:36 +0200
Subject: [PATCH 17/19] Print out the received buffer

---
 drivers/hid/hid-asus.c | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 99db98c097bd..5c96b5f96505 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -574,6 +574,7 @@ struct asus_drvdata {
 	unsigned int rog_ally_controller_mode_switch_packet_index;
 	unsigned int rog_ally_controller_pipe;
 	enum rog_ally_controller_mode rog_ally_controller_mode;
+	void* rog_ally_controller_input_buffer;
 	struct mutex rog_ally_controller_mutex;
 };
 
@@ -645,23 +646,20 @@ static int rog_ally_data_read(struct hid_device * hdev) {
 	
 	int retval = 0;
 
-	void *recv_buffer = kzalloc(32, GFP_KERNEL);
-	if (recv_buffer == NULL) {
-		retval = -ENOMEM;
-		goto rog_ally_data_read_alloc_err;
-	}
-
-	retval = usb_control_msg_recv(dev, 0x80, 0x01, 0xa1, 0x035A, 0x0002, recv_buffer, 32, 999, GFP_KERNEL);
+	retval = usb_control_msg_recv(dev, 0x80, 0x01, 0xa1, 0x035A, 0x0002, drvdata->rog_ally_controller_input_buffer, 32, 999, GFP_KERNEL);
 
 	if (retval < 0) {
 		hid_err(hdev, "Ally read failed performing control read, error %d\n", retval);
-		goto rog_ally_data_read_err;
+	} else {
+		const char* b = (const char*)drvdata->rog_ally_controller_input_buffer;
+		hid_info(hdev, "0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x0x%02x",
+			b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], 
+			b[10], b[11], b[12], b[13], b[14], b[15], b[16], b[17], b[18], b[19], 
+			b[20], b[21], b[22], b[23], b[24], b[25], b[26], b[27], b[28], b[29], 
+			b[30], b[31]
+		);
 	}
 
-rog_ally_data_read_err:
-	kfree(recv_buffer);
-
-rog_ally_data_read_alloc_err:
 	return retval;
 }
 
@@ -1765,11 +1763,19 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 	}
 
+	drvdata->rog_ally_controller_input_buffer = NULL;
+
 	if (dmi_match(DMI_PRODUCT_NAME, "ROG Ally RC71L_RC71L"))
 	{
 		struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
 		struct usb_device *dev = interface_to_usbdev(intf);
 
+		drvdata->rog_ally_controller_input_buffer = kzalloc(32, GFP_KERNEL);
+		if (drvdata->rog_ally_controller_input_buffer == NULL) {
+			ret = -ENOMEM;
+			goto err_stop_hw;
+		}
+
 		drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		drvdata->rog_ally_controller_mode = default_mode;
 
@@ -1804,6 +1810,10 @@ static void asus_remove(struct hid_device *hdev)
 		cancel_work_sync(&drvdata->kbd_backlight->work);
 	}
 
+	if (drvdata->rog_ally_controller_input_buffer != NULL) {
+		kfree(drvdata->rog_ally_controller_input_buffer);
+	}
+
 	hid_hw_stop(hdev);
 }
 
-- 
2.42.0


From c1621e677e66b9d74819ff9f3449b97deeeb663d Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Tue, 24 Oct 2023 00:06:26 +0200
Subject: [PATCH 18/19] Send debug output

---
 drivers/hid/hid-asus.c | 75 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 75 insertions(+)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 5c96b5f96505..fbebfca8edc9 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -804,12 +804,87 @@ static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute
 	return count;
 }
 
+static const u8 hextable[] = {
+   [0 ... 255] = 0xFF, // bit aligned access into this table is considerably
+   ['0'] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // faster for most modern processors,
+   ['A'] = 10, 11, 12, 13, 14, 15,       // for the space conscious, reduce to
+   ['a'] = 10, 11, 12, 13, 14, 15        // signed char.
+};
+
+#define ASUS_HID_ALLY_DBG
+
+#ifdef ASUS_HID_ALLY_DBG
+static ssize_t debug_write_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
+	struct hid_device *hdev = to_hid_device(raw_dev);
+	
+	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+
+	struct usb_interface *intf = to_usb_interface(hdev->dev.parent);
+	struct usb_device *dev = interface_to_usbdev(intf);
+
+	int res = -EINVAL;
+	
+	ssize_t buf_sz = count / 2;
+	buf_sz = buf_sz >= 64 ? 64 : buf_sz;
+
+	void *buffer_clone = kzalloc(buf_sz, GFP_KERNEL);
+
+	if (buffer_clone == NULL) {
+		return -ENOMEM;
+	}
+
+	ssize_t i;
+	for (i = 0; i < buf_sz; ++i) {
+		u8* t = ((u8*)&buffer_clone) + (i / 2);
+		u8 ch = hextable[buf[i]];
+		if (ch == 0xFF) {
+			hid_info(hdev, "found invalid byte. Stopping at %zd", i);
+			break;
+		}
+
+		if ((i % 2) == 1) {
+			*t |= ch;
+		} else {
+			*t |= ch << 4u;
+		}
+	}
+	buf_sz = i/2;
+
+	hid_info(hdev, "sending out %zd bytes", buf_sz);
+
+	mutex_lock(&drvdata->rog_ally_controller_mutex);
+
+	/* send the data out the bulk port */
+	res = usb_control_msg(dev, drvdata->rog_ally_controller_pipe, 0x09, 0x21, 0x035A, 0x0002, buffer_clone, buf_sz, 999);
+
+	kfree(buffer_clone);
+
+	if (res < 0) {
+		hid_err(hdev,
+			"failed submitting debug control write error %d\n", res);
+
+		goto debug_write_store_err;
+	}
+
+debug_write_store_err:
+	mutex_unlock(&drvdata->rog_ally_controller_mutex);
+
+	return res < 0 ? res : count;
+}
+
+
+DEVICE_ATTR_WO(debug_write);
+#endif
+
 DEVICE_ATTR_RO(current_mode);
 DEVICE_ATTR_WO(switch_mode);
 
 static struct attribute *controller_modes_attrs[] = {
 	&dev_attr_current_mode.attr,
 	&dev_attr_switch_mode.attr,
+#ifdef ASUS_HID_ALLY_DBG
+	&dev_attr_debug_write.attr,
+#endif
 	NULL
 };
 
-- 
2.42.0


From 405cf78eb96d57cfe55f64b7818c147e935cfbad Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Tue, 24 Oct 2023 00:53:52 +0200
Subject: [PATCH 19/19] yeah... nice bugs

---
 drivers/hid/hid-asus.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index fbebfca8edc9..086f16540e02 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -735,10 +735,12 @@ static int rog_ally_controller_mode_change(struct hid_device * hdev, enum rog_al
 			hid_err(hdev,
 				"Ally controller mode switch %d/23 error %d\n",
 				drvdata->rog_ally_controller_mode_switch_packet_index, ret);
-			drvdata->rog_ally_controller_mode_switch_packet_index = 0;
 		}
 	}
 
+	// reset to the first packet for successive entries
+	drvdata->rog_ally_controller_mode_switch_packet_index = 0;
+
 rog_ally_controller_mode_change_err:
 	ret = ret < 0 ? ret : 0;
 
@@ -835,7 +837,7 @@ static ssize_t debug_write_store(struct device *raw_dev, struct device_attribute
 
 	ssize_t i;
 	for (i = 0; i < buf_sz; ++i) {
-		u8* t = ((u8*)&buffer_clone) + (i / 2);
+		u8* t = ((u8*)buffer_clone) + (i / 2);
 		u8 ch = hextable[buf[i]];
 		if (ch == 0xFF) {
 			hid_info(hdev, "found invalid byte. Stopping at %zd", i);
-- 
2.42.0

